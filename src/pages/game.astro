---
const pageTitle = "Reflexions-Run – Sammle die Spiegel";
---
<!doctype html>
<html lang="de">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{pageTitle}</title>
    <style>
      body{margin:0;font-family:system-ui,Segoe UI,Roboto,Arial,sans-serif;background:#0f1115;color:#e9e9ee}
      .wrap{max-width:1000px;margin:1.5rem auto;padding:0 1rem}
      .title{margin:0 0 .5rem}
      .hint{color:#a9acb6;margin:0 0 1rem}
      #game{display:block;margin:0 auto;border:1px solid #222;border-radius:8px;box-shadow:0 8px 28px rgba(0,0,0,.4)}
      .overlay{position:fixed;inset:0;background:rgba(0,0,0,.6);display:none;align-items:center;justify-content:center;padding:1rem}
      .card{max-width:800px;background:#151925;border:1px solid #2a2f3a;border-radius:12px;padding:1rem 1.2rem}
      .card h3{margin:.2rem 0 .6rem}
      .card h4{margin:.6rem 0 .4rem;color:#a9acb6;font-weight:600}
      .card p{line-height:1.6}
      .close{float:right;background:#2a4ca8;border:none;color:white;padding:.4rem .7rem;border-radius:8px;cursor:pointer}
      .transkript h2{margin:1.8rem 0 .6rem}
      .qa{margin:.9rem 0;padding:1rem;background:#12141a;border:1px solid #262a34;border-radius:10px}
      .qa h4{margin:.1rem 0 .4rem;color:#b6bad3}
    </style>
  </head>
  <body>
    <div class="wrap">
      <h1 class="title">{pageTitle}</h1>
      <p class="hint">Steuerung: ← → bewegen, ↑ springen. Sammle die <b>Spiegel</b>, um Reflexionen zu öffnen.</p>
      <canvas id="game" width="960" height="540"></canvas>
      <div class="overlay" id="overlay">
        <div class="card" role="dialog" aria-modal="true" aria-labelledby="dlgTitle">
          <button class="close" id="closeBtn">Schließen</button>
          <h3 id="dlgTitle">Titel</h3>
          <h4 id="dlgQuestion">Frage</h4>
          <p id="dlgAnswer">Antwort</p>
        </div>
      </div>

      <section class="transkript" id="transkript">
        <h2>Transkript aller Reflexionen</h2>
        <p class="hint">Für die Bewertung: Alle Antworten stehen hier zusätzlich im Fließtext.</p>
        <div id="transkriptBody"></div>
      </section>
    </div>

    <!-- Phaser als ES-Modul laden und erst nach DOM-Load starten -->
    <script type="module">
  // Hilfsfunktion für GitHub Pages (Project Pages mit `base`)
  const BASE = (import.meta.env && import.meta.env.BASE_URL) ? import.meta.env.BASE_URL : '/';

  window.addEventListener('DOMContentLoaded', async () => {
    const { default: Phaser } = await import('https://cdn.jsdelivr.net/npm/phaser@3.70.0/dist/phaser.esm.js');
    // Content laden
    const data = await fetch(`${BASE}reflections.json`).then(r => r.json());
    const entries = data.entries;

    // --- Transkript unten aufbauen (unverändert zu vorher) ---
    const tBody = document.getElementById('transkriptBody');
    entries.forEach(entry => {
      const h3 = document.createElement('h3');
      h3.textContent = entry.title + (entry.date ? " · " + entry.date : "");
      tBody.appendChild(h3);
      entry.qas.forEach((qa, idx) => {
        const box = document.createElement('div'); box.className = 'qa';
        const q = document.createElement('h4'); q.textContent = `Frage ${idx+1}: ${qa.q}`;
        const a = document.createElement('p');  a.textContent = qa.a;
        box.appendChild(q); box.appendChild(a); tBody.appendChild(box);
      });
    });

    // Overlay-Helfer
    const overlay = document.getElementById('overlay');
    const closeBtn = document.getElementById('closeBtn');
    const dlgTitle = document.getElementById('dlgTitle');
    const dlgQuestion = document.getElementById('dlgQuestion');
    const dlgAnswer = document.getElementById('dlgAnswer');
    function openDialog(entryIndex, qaIndex){
      const entry = entries[entryIndex];
      const qa = entry.qas[qaIndex];
      dlgTitle.textContent = entry.title;
      dlgQuestion.textContent = `Frage ${qaIndex+1}: ${qa.q}`;
      dlgAnswer.textContent = qa.a;
      overlay.style.display = 'flex';
    }
    function closeDialog(){ overlay.style.display = 'none'; }
    closeBtn.addEventListener('click', closeDialog);
    overlay.addEventListener('click', (e)=>{ if(e.target===overlay) closeDialog(); });
    window.addEventListener('keydown', (e)=>{ if(e.key==='Escape') closeDialog(); });

    // --- Phaser Mini-Game ---
    const W = 960, H = 540;
    const config = {
      type: Phaser.AUTO,             // AUTO/WEBGL/CANVAS -> mit ESM ok
      width: W, height: H,
      canvas: document.getElementById('game'),
      physics: { default: 'arcade', arcade: { gravity: { y: 1200 }, debug: false } },
      scene: { preload, create, update }
    };
    const game = new Phaser.Game(config);

    let cursors, player, platforms, mirrors;
    let collected = new Set();

    function preload(){
      // Texturen robust erzeugen (über Graphics → Texture), statt auf internem API
      const g = this.add.graphics();
      g.fillStyle(0x33ddff, 1).fillRect(0,0,24,24).generateTexture('player', 24, 24).clear();
      g.fillStyle(0x4c5365, 1).fillRect(0,0,64,16).generateTexture('platform', 64, 16).clear();
      g.fillStyle(0xc6b8ff, 1).fillRect(0,0,18,26).generateTexture('mirror', 18, 26).destroy();
    }

    function create(){
      // Boden & Plattformen
      platforms = this.physics.add.staticGroup();
      for(let x=0; x<W; x+=64){ platforms.create(x, H-24, 'platform').setOrigin(0,0).refreshBody(); }
      platforms.create(150, 420, 'platform').setOrigin(0,0).refreshBody();
      platforms.create(360, 340, 'platform').setOrigin(0,0).refreshBody();
      platforms.create(620, 280, 'platform').setOrigin(0,0).refreshBody();
      platforms.create(780, 200, 'platform').setOrigin(0,0).refreshBody();

      // Spieler
      player = this.physics.add.sprite(60, H-80, 'player');
      player.setBounce(0.05);
      player.setCollideWorldBounds(true);
      this.physics.add.collider(player, platforms);

      // Spiegel (QA-Mapping)
      mirrors = this.physics.add.staticGroup();
      const points = [
        { x: 180, y: 400, entry: 0, qa: 0 },
        { x: 380, y: 320, entry: 0, qa: 1 },
        { x: 640, y: 260, entry: 0, qa: 2 },
        { x: 800, y: 180, entry: 1, qa: 0 },
        { x: 520, y: 180, entry: 1, qa: 1 },
      ];
      points.forEach((p)=>{
        const s = mirrors.create(p.x, p.y, 'mirror').setOrigin(.5,1);
        s.setData('entry', p.entry);
        s.setData('qa', p.qa);
        s.setData('id', `${p.entry}-${p.qa}`);
      });

      this.physics.add.overlap(player, mirrors, (_pl, m) => {
        const id = m.getData('id');
        if(!collected.has(id)){
          collected.add(id);
          openDialog(m.getData('entry'), m.getData('qa'));
          m.destroy();
        }
      });

      cursors = this.input.keyboard.createCursorKeys();
    }

    function update(){
      const speed = 220;
      if(cursors.left.isDown){        player.setVelocityX(-speed); }
      else if(cursors.right.isDown){  player.setVelocityX(speed); }
      else {                          player.setVelocityX(0); }
      if(cursors.up.isDown && player.body.blocked.down){
        player.setVelocityY(-480);
      }
    }
  });
</script>

  </body>
</html>
